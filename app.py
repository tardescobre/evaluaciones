import streamlit as st
import pandas as pd
import os
from datetime import datetime
import urllib.parse
import streamlit.components.v1 as components

# ----------------------------
# Configuraci√≥n de la p√°gina
# ----------------------------
st.set_page_config(
    page_title="Formulario Psicomotriz",
    layout="centered"
)

# ----------------------------
# Carpetas y archivos
# ----------------------------
DATA_FOLDER = "datos_guardados"
if not os.path.exists(DATA_FOLDER):
    os.makedirs(DATA_FOLDER)

DATA_FILE_PROF = os.path.join(DATA_FOLDER, "profesionales.csv")
PACIENTES_FILE = os.path.join(DATA_FOLDER, "pacientes.csv")

# ----------------------------
# Definici√≥n de pesta√±as
# ----------------------------
tabs = st.tabs([
    "Introducci√≥n",
    "Registro de datos del profesional",
    "Datos del paciente",
    "Antecedentes",
    "Tests psicomotrices",
    "Seguimiento del proceso",
    "Guardar evaluaci√≥n",
    "Lista de pacientes",
    "Cuestionario de validaci√≥n"
])

# ----------------------------
# Pesta√±a 1: Introducci√≥n
# ----------------------------
with tabs[0]:
    st.title("Formulario Psicomotriz - Prototipo Web")
    
    # Presentaci√≥n del equipo
    st.markdown("""
    **Equipo responsable del proyecto:**  
    - üë©‚Äç‚öïÔ∏è Licenciada en Psicomotricidad  
    - üìä Licenciado en Estad√≠stica
    """)
    
    st.header("Resumen")
    st.write("""
    Estimado profesional:

    Este enlace que recibiste por WhatsApp te lleva a un **prototipo de formulario web** 
    dise√±ado para **digitalizar los procesos de evaluaci√≥n y seguimiento de los pacientes en la cl√≠nica psicomotriz**.
             
    Si tu profesi√≥n es otra y recibiste el link, es porque consideramos que tus aportes ser√°n fundamentales para este proyecto y la posibilidad de ampliarlo hacia otras disciplinas en un futuro.

    **Objetivo:**
    - Validar la digitalizaci√≥n de formularios.
    - Mejorar eficiencia y precisi√≥n.
    - Facilitar seguimiento de evoluci√≥n de pacientes.

    **¬øPor qu√© recibiste este link?**
    - Queremos recopilar informaci√≥n de los profesionales que participan.
    - Tu colaboraci√≥n permitir√° validar el prototipo para realizar una investigaci√≥n.
    """)

# ----------------------------
# Pesta√±a 2: Registro de datos del profesional
# ----------------------------
with tabs[1]:
    st.header("Registro de datos del profesional")
    
    nombre_prof = st.text_input("Nombre completo", key="prof_nombre")
    profesion_prof = st.text_input("Profesi√≥n", key="prof_profesion")
    cedula_prof = st.text_input("C√©dula", key="prof_cedula")

    if st.button("Registrar datos profesionales"):
        if nombre_prof and profesion_prof and cedula_prof:
            # Guardar datos profesionales en CSV
            nueva_fila = pd.DataFrame({
                "Nombre": [nombre_prof],
                "Profesi√≥n": [profesion_prof],
                "C√©dula": [cedula_prof],
                "Fecha registro": [datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
            })
            if os.path.exists(DATA_FILE_PROF):
                df = pd.read_csv(DATA_FILE_PROF)
                df = pd.concat([df, nueva_fila], ignore_index=True)
            else:
                df = nueva_fila
            df.to_csv(DATA_FILE_PROF, index=False)
            st.success(f"Gracias {nombre_prof}, tus datos fueron registrados correctamente.")
        else:
            st.error("Por favor complet√° todos los campos del profesional.")
            # Mensaje al pie de la p√°gina, debajo de todo
st.markdown("<div style='margin-top:50px; color:gray;'>En la pesta√±a siguiente comienza el prototipo de formulario para cada paciente.</div>", unsafe_allow_html=True)

# ----------------------------
# Pesta√±a 3: Datos del paciente
# ----------------------------
with tabs[2]:
    st.header("Datos del paciente")
    
    # Inicializar dataframe si no existe
    if os.path.exists(PACIENTES_FILE):
        df_pacientes = pd.read_csv(PACIENTES_FILE)
    else:
        df_pacientes = pd.DataFrame(columns=["Nombre", "Fecha", "Hora"])
    
    # Tabla editable de pacientes
    st.subheader("Pacientes registrados (editable)")
    edited_df = st.data_editor(
        df_pacientes,
        num_rows="dynamic",
        use_container_width=True,
        key="pacientes_editor"
    )
    if st.button("Guardar cambios en la tabla"):
        edited_df.to_csv(PACIENTES_FILE, index=False)
        st.success("Cambios guardados correctamente.")

# ----------------------------
# Pesta√±a 4: Antecedentes
# ----------------------------
with tabs[3]:
    st.header("Antecedentes")
    with st.form("form_antecedentes"):
        antecedentes = st.text_area("Ingrese los antecedentes del paciente")
        derivado_por = st.text_input("Derivado por:")
        origen = st.text_input("Origen de la derivaci√≥n")
        submitted_antec = st.form_submit_button("Guardar antecedentes")
        if submitted_antec:
            st.success("Antecedentes guardados correctamente!")

# ----------------------------
# Pesta√±a 5: Tests psicomotrices
# ----------------------------
with tabs[4]:
    st.header("Tests psicomotrices")
    tests_disponibles = [
        "DFH Koppitz",
        "Reversal Test",
        "Test de Figura Compleja",
        "Test escritura Ajuriaguerra",
        "Test de Bender",
        "Esquema Corporal Vitor Da Fonseca",
        "Bater√≠a Piaget-Head",
        "Test de Dibujo Libre",
        "Test de Frostig",
        "Test de Pascual"
    ]
    with st.form("form_tests"):
        seleccionados = st.multiselect("Seleccione los tests realizados", tests_disponibles)
        resultados = st.text_area("Detalle los resultados de los tests")
        submitted_tests = st.form_submit_button("Guardar tests")
        if submitted_tests:
            st.success("Tests guardados correctamente!")

# ----------------------------
# Pesta√±a 6: Seguimiento del proceso
# ----------------------------
with tabs[5]:
    st.header("Seguimiento del proceso")
    with st.form("form_seguimiento"):
        st.subheader("Notas de relevancia cl√≠nica")
        notas_clinicas = st.text_area("")
        st.subheader("Ideas cualitativas sobre el proceso vincular")
        ideas_vinculares = st.text_area("C√≥mo se van construyendo las relaciones ni√±o‚Äìfamilia‚Äìescuela‚Äìterapeuta")
        st.subheader("Observaciones / Avances")
        motor = st.text_area("Motor")
        afectivo = st.text_area("Afectivo")
        relacional = st.text_area("Relacional")
        submitted_seguimiento = st.form_submit_button("Guardar seguimiento")
        if submitted_seguimiento:
            st.success("Seguimiento guardado correctamente!")

# ----------------------------
# Pesta√±a 7: Guardar evaluaci√≥n
# ----------------------------
with tabs[6]:
    st.header("Guardar evaluaci√≥n completa")
    with st.form("form_guardar"):
        comentario_final = st.text_area("Comentarios finales antes de guardar evaluaci√≥n")
        submitted_final = st.form_submit_button("Guardar evaluaci√≥n")

# ----------------------------
# Pesta√±a 8: Lista de pacientes
# ----------------------------
with tabs[7]:
    st.header("üìã Lista de pacientes registrados")
    try:
        if os.path.exists(PACIENTES_FILE):
            df_pacientes = pd.read_csv(PACIENTES_FILE)
            st.dataframe(df_pacientes)
        else:
            st.info("No hay pacientes registrados a√∫n.")
    except Exception as e:
        st.info("No hay registros de pacientes a√∫n o el archivo no existe.")

# ----------------------------
# Pesta√±a 9: Cuestionario de validaci√≥n
# ----------------------------
with tabs[8]:
    st.header("‚úÖ Cuestionario de validaci√≥n de la app")

    FEEDBACK_FILE = os.path.join(DATA_FOLDER, "feedback_app.csv")

    with st.form("form_feedback"):
        # Mapas de respuestas cualitativas a num√©ricas
        utilidad_map = {"Mucho": 5, "Algo": 3, "Nada": 1}
        eficiencia_map = {"S√≠": 5, "Parcialmente": 3, "No": 1}
        satisfaccion_map = {"S√≠": 5, "Parcialmente": 3, "No": 1}
        dise√±o_map = {
            "Muy bueno": 5,
            "Bueno": 4,
            "Regular": 3,
            "Malo": 2,
            "Muy malo": 1
        }

        # ------------------
        # Preguntas
        # ------------------
        utilidad_resp = st.radio(
            "¬øEste formulario digital le facilitar√≠a su trabajo comparado con el m√©todo actual?",
            ["Mucho", "Algo", "Nada"]
        )
        eficiencia_resp = st.radio(
            "¬øCree que este formulario ayuda a que sus procesos sean m√°s eficientes?",
            ["S√≠", "Parcialmente", "No"]
        )
        intencion_uso = st.slider(
            "En una escala del 0 al 10, ¬øqu√© probabilidad tiene de usar esta app regularmente?",
            0, 10, 7
        )
        satisfaccion_claridad = st.radio(
            "¬øConsidera que el formulario es claro y f√°cil de completar?",
            ["S√≠", "Parcialmente", "No"]
        )
        satisfaccion_dise√±o = st.radio(
            "¬øC√≥mo eval√∫a el dise√±o visual de la app?",
            ["Muy bueno", "Bueno", "Regular", "Malo", "Muy malo"]
        )

        mejoras = st.text_area("¬øQu√© agregar√≠an o modificar√≠an en las secciones existentes?")
        comentarios = st.text_area("Comentarios o sugerencias adicionales (respuesta libre)")

        submitted_feedback = st.form_submit_button("Enviar feedback")

        if submitted_feedback:
            # ------------------
            # Mapear respuestas a valores num√©ricos
            # ------------------
            utilidad_val = utilidad_map[utilidad_resp]
            eficiencia_val = eficiencia_map[eficiencia_resp]
            satisfaccion_claridad_val = satisfaccion_map[satisfaccion_claridad]
            satisfaccion_dise√±o_val = dise√±o_map[satisfaccion_dise√±o]

            # ------------------
            # Guardar en CSV
            # ------------------
            nueva_fila = pd.DataFrame({
                "utilidad": [utilidad_val],
                "eficiencia": [eficiencia_val],
                "intencion_uso": [intencion_uso],
                "satisfaccion_claridad": [satisfaccion_claridad_val],
                "satisfaccion_dise√±o": [satisfaccion_dise√±o_val],
                "mejoras": [mejoras],
                "comentarios": [comentarios],
                "fecha_envio": [datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
            })

            if os.path.exists(FEEDBACK_FILE):
                df_feedback = pd.read_csv(FEEDBACK_FILE)
                df_feedback = pd.concat([df_feedback, nueva_fila], ignore_index=True)
            else:
                df_feedback = nueva_fila
            df_feedback.to_csv(FEEDBACK_FILE, index=False)

            st.success("¬°Gracias! Tu feedback fue registrado correctamente.")

            # ------------------
            # Generar resumen para WhatsApp
            # ------------------
            resumen_compacto = (
                f"Feedback App\n"
                f"Utilidad: {utilidad_val}/5\n"
                f"Eficiencia: {eficiencia_val}/5\n"
                f"Intenci√≥n de uso: {intencion_uso}/10\n"
                f"Satisfacci√≥n claridad: {satisfaccion_claridad_val}/5\n"
                f"Satisfacci√≥n dise√±o: {satisfaccion_dise√±o_val}/5\n"
                f"Mejoras: {mejoras}\n"
                f"Comentarios: {comentarios}"
            )

            st.markdown('<h4>Resumen generado:</h4>', unsafe_allow_html=True)
            st.code(resumen_compacto, language=None)

            # ------------------
            # Bot√≥n copiar al portapapeles
            # ------------------
            copy_code = f'''
<button id="copyBtn" style="background-color:#25D366;color:white;padding:1em 2em;font-size:1.2em;border:none;border-radius:8px;font-weight:bold;cursor:pointer;">üìã Copiar feedback</button>
<script>
document.getElementById('copyBtn').onclick = function() {{
    navigator.clipboard.writeText(`{resumen_compacto}`);
    alert('¬°Resumen copiado! Ahora p√©galo en WhatsApp.');
}}
</script>
'''
            components.html(copy_code, height=80)

            # ------------------
            # Bot√≥n enviar WhatsApp
            # ------------------
            mensaje_codificado = urllib.parse.quote_plus(resumen_compacto)
            numero = "59898776605"

            js_code = f'''
<button id="wappBtn" style="background-color:#25D366;color:white;padding:1em 2em;font-size:1.2em;border:none;border-radius:8px;font-weight:bold;cursor:pointer;margin-top:1em;">üí¨ Enviar feedback por WhatsApp</button>
<script>
document.getElementById('wappBtn').onclick = function() {{
    var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    var url = '';
    if (isMobile) {{
        url = 'https://wa.me/?text={mensaje_codificado}';
    }} else {{
        url = 'https://web.whatsapp.com/send?phone={numero}&text={mensaje_codificado}';
    }}
    window.open(url, '_blank');
}}
</script>
'''
            components.html(js_code, height=120)

